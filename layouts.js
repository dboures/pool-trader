"use strict";
exports.__esModule = true;
// @ts-ignore
var buffer_layout_1 = require("buffer-layout");
var borsh_1 = require("@project-serum/borsh");
exports.MINT_LAYOUT = buffer_layout_1.struct([
    buffer_layout_1.u32('mintAuthorityOption'),
    borsh_1.publicKey('mintAuthority'),
    borsh_1.u64('supply'),
    buffer_layout_1.u8('decimals'),
    borsh_1.bool('initialized'),
    buffer_layout_1.u32('freezeAuthorityOption'),
    borsh_1.publicKey('freezeAuthority')
]);
exports.AMM_INFO_LAYOUT = buffer_layout_1.struct([
    borsh_1.u64('status'),
    borsh_1.u64('nonce'),
    borsh_1.u64('orderNum'),
    borsh_1.u64('depth'),
    borsh_1.u64('coinDecimals'),
    borsh_1.u64('pcDecimals'),
    borsh_1.u64('state'),
    borsh_1.u64('resetFlag'),
    borsh_1.u64('fee'),
    borsh_1.u64('minSize'),
    borsh_1.u64('volMaxCutRatio'),
    borsh_1.u64('pnlRatio'),
    borsh_1.u64('amountWaveRatio'),
    borsh_1.u64('coinLotSize'),
    borsh_1.u64('pcLotSize'),
    borsh_1.u64('minPriceMultiplier'),
    borsh_1.u64('maxPriceMultiplier'),
    borsh_1.u64('needTakePnlCoin'),
    borsh_1.u64('needTakePnlPc'),
    borsh_1.u64('totalPnlX'),
    borsh_1.u64('totalPnlY'),
    borsh_1.u64('systemDecimalsValue'),
    borsh_1.publicKey('poolCoinTokenAccount'),
    borsh_1.publicKey('poolPcTokenAccount'),
    borsh_1.publicKey('coinMintAddress'),
    borsh_1.publicKey('pcMintAddress'),
    borsh_1.publicKey('lpMintAddress'),
    borsh_1.publicKey('ammOpenOrders'),
    borsh_1.publicKey('serumMarket'),
    borsh_1.publicKey('serumProgramId'),
    borsh_1.publicKey('ammTargetOrders'),
    borsh_1.publicKey('ammQuantities'),
    borsh_1.publicKey('poolWithdrawQueue'),
    borsh_1.publicKey('poolTempLpTokenAccount'),
    borsh_1.publicKey('ammOwner'),
    borsh_1.publicKey('pnlOwner')
]);
exports.AMM_INFO_LAYOUT_V3 = buffer_layout_1.struct([
    borsh_1.u64('status'),
    borsh_1.u64('nonce'),
    borsh_1.u64('orderNum'),
    borsh_1.u64('depth'),
    borsh_1.u64('coinDecimals'),
    borsh_1.u64('pcDecimals'),
    borsh_1.u64('state'),
    borsh_1.u64('resetFlag'),
    borsh_1.u64('fee'),
    borsh_1.u64('min_separate'),
    borsh_1.u64('minSize'),
    borsh_1.u64('volMaxCutRatio'),
    borsh_1.u64('pnlRatio'),
    borsh_1.u64('amountWaveRatio'),
    borsh_1.u64('coinLotSize'),
    borsh_1.u64('pcLotSize'),
    borsh_1.u64('minPriceMultiplier'),
    borsh_1.u64('maxPriceMultiplier'),
    borsh_1.u64('needTakePnlCoin'),
    borsh_1.u64('needTakePnlPc'),
    borsh_1.u64('totalPnlX'),
    borsh_1.u64('totalPnlY'),
    borsh_1.u64('systemDecimalsValue'),
    borsh_1.publicKey('poolCoinTokenAccount'),
    borsh_1.publicKey('poolPcTokenAccount'),
    borsh_1.publicKey('coinMintAddress'),
    borsh_1.publicKey('pcMintAddress'),
    borsh_1.publicKey('lpMintAddress'),
    borsh_1.publicKey('ammOpenOrders'),
    borsh_1.publicKey('serumMarket'),
    borsh_1.publicKey('serumProgramId'),
    borsh_1.publicKey('ammTargetOrders'),
    borsh_1.publicKey('ammQuantities'),
    borsh_1.publicKey('poolWithdrawQueue'),
    borsh_1.publicKey('poolTempLpTokenAccount'),
    borsh_1.publicKey('ammOwner'),
    borsh_1.publicKey('pnlOwner'),
    borsh_1.publicKey('srmTokenAccount')
]);
exports.AMM_INFO_LAYOUT_V4 = buffer_layout_1.struct([
    borsh_1.u64('status'),
    borsh_1.u64('nonce'),
    borsh_1.u64('orderNum'),
    borsh_1.u64('depth'),
    borsh_1.u64('coinDecimals'),
    borsh_1.u64('pcDecimals'),
    borsh_1.u64('state'),
    borsh_1.u64('resetFlag'),
    borsh_1.u64('minSize'),
    borsh_1.u64('volMaxCutRatio'),
    borsh_1.u64('amountWaveRatio'),
    borsh_1.u64('coinLotSize'),
    borsh_1.u64('pcLotSize'),
    borsh_1.u64('minPriceMultiplier'),
    borsh_1.u64('maxPriceMultiplier'),
    borsh_1.u64('systemDecimalsValue'),
    borsh_1.u64('minSeparateNumerator'),
    borsh_1.u64('minSeparateDenominator'),
    borsh_1.u64('tradeFeeNumerator'),
    borsh_1.u64('tradeFeeDenominator'),
    borsh_1.u64('pnlNumerator'),
    borsh_1.u64('pnlDenominator'),
    borsh_1.u64('swapFeeNumerator'),
    borsh_1.u64('swapFeeDenominator'),
    borsh_1.u64('needTakePnlCoin'),
    borsh_1.u64('needTakePnlPc'),
    borsh_1.u64('totalPnlPc'),
    borsh_1.u64('totalPnlCoin'),
    borsh_1.u128('poolTotalDepositPc'),
    borsh_1.u128('poolTotalDepositCoin'),
    borsh_1.u128('swapCoinInAmount'),
    borsh_1.u128('swapPcOutAmount'),
    borsh_1.u64('swapCoin2PcFee'),
    borsh_1.u128('swapPcInAmount'),
    borsh_1.u128('swapCoinOutAmount'),
    borsh_1.u64('swapPc2CoinFee'),
    borsh_1.publicKey('poolCoinTokenAccount'),
    borsh_1.publicKey('poolPcTokenAccount'),
    borsh_1.publicKey('coinMintAddress'),
    borsh_1.publicKey('pcMintAddress'),
    borsh_1.publicKey('lpMintAddress'),
    borsh_1.publicKey('ammOpenOrders'),
    borsh_1.publicKey('serumMarket'),
    borsh_1.publicKey('serumProgramId'),
    borsh_1.publicKey('ammTargetOrders'),
    borsh_1.publicKey('poolWithdrawQueue'),
    borsh_1.publicKey('poolTempLpTokenAccount'),
    borsh_1.publicKey('ammOwner'),
    borsh_1.publicKey('pnlOwner')
]);
// https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L210
exports.ACCOUNT_LAYOUT = buffer_layout_1.struct([
    borsh_1.publicKey('mint'),
    borsh_1.publicKey('owner'),
    borsh_1.u64('amount'),
    buffer_layout_1.u32('delegateOption'),
    borsh_1.publicKey('delegate'),
    buffer_layout_1.u8('state'),
    buffer_layout_1.u32('isNativeOption'),
    borsh_1.u64('isNative'),
    borsh_1.u64('delegatedAmount'),
    buffer_layout_1.u32('closeAuthorityOption'),
    borsh_1.publicKey('closeAuthority')
]);
